import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm


plt.rc('text', usetex=True)
plt.rc('font', family='serif', size=12)


# Definición de parámetros
zetamin, zetamax, nzeta = 1.01, 10.0, 450
zeta = np.linspace(zetamin, zetamax, nzeta)

lR_min, lR_max, nlR = 0.01, 2.0, 450
lR = np.linspace(lR_min, lR_max, nlR)

P_min, P_max, nP = 100, 1200, 450
P_values = np.linspace(P_min, P_max, nP)

ntau_d = 450
obs_values = np.linspace(0.01, 10, ntau_d)

# Creación de una malla de valores
Z, LR = np.meshgrid(zeta, lR)

# Modelo 1: Amortiguamiento resonante

# Cálculo de tau_d / P
r1 = (2 / np.pi) * (1 / LR) * ((Z + 1) / (Z - 1))

# Priors uniformes para zeta y l/R
prior_zeta = 1 / (zetamax - zetamin)
prior_lor = 1 / (lR_max - lR_min)

sigma = 0.1 * obs_values[:, None, None]
like1_obs = (1 / (np.sqrt(2 * np.pi) * sigma)) * np.exp(-((obs_values[:, None, None] - r1) ** 2) / (2 * sigma ** 2))
posterior = like1_obs * prior_zeta * prior_lor
marginals_ = np.trapz(posterior, lR, axis=1)
marginals_ = np.trapz(marginals_, zeta, axis=1)

colors = cm.Set1(4)

plt.figure(figsize=(8, 6))
plt.plot(obs_values, marginals_, color=colors, label="Amortiguamiento resonante")  # Color de Set2
plt.xlabel("$r_1$", fontsize=17)
plt.ylabel(r"$p(\tau_d/P |\: r_1)$", fontsize=18)
plt.tight_layout()

# Modelo 4: Amortiguamiento no lineal

# Definición de parámetros
Rmin, Rmax, nR = 0.5, 5, 300
R = np.linspace(Rmin, Rmax, nR)

ntau_d =300
obs_values = np.linspace(0.01, 10, ntau_d)

# Creación de una malla de valores
Z, R_grid = np.meshgrid(zeta, R)  

eta_values = [0.2,10,30]

colors = cm.Set1(3)


line_styles = [':','--','-']

for i, e in enumerate(eta_values): 
    # Cálculo de tau_d / P
    r4 = 40 * np.sqrt(np.pi) * (1 / (2 * np.pi * e / R_grid)) * ((1 + Z) / np.sqrt(Z**2 - 2*Z + 97))
    # Priors uniformes para zeta y R
    prior_zeta = 1 / (zetamax - zetamin)
    prior_R = 1 / (Rmax - Rmin)
    
    sigma = 0.1 * obs_values[:, None, None]
    like1_obs = (1 / (np.sqrt(2 * np.pi) * sigma)) * np.exp(-((obs_values[:, None, None] - r4) ** 2) / (2 * sigma ** 2))
    posterior = like1_obs * prior_R * prior_zeta
    marginals_ = np.trapz(posterior, R, axis=0)
    marginals = np.trapz(marginals_, zeta, axis=1)
    label = r"Amortiguamiento no lineal" if i == 0 else None
    plt.plot(obs_values, marginals, linestyle=line_styles[i], color=colors, label=label)

plt.xlabel(r"$\tau_d/P$", fontsize=17)
plt.ylabel(r"$p(\tau_d/P |\: M)$", fontsize=18)
plt.legend(fontsize=14)
plt.tight_layout()  
plt.show()
