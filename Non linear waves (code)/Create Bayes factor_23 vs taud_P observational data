import numpy as np
import matplotlib.pyplot as plt

plt.rc('text', usetex=True)
plt.rc('font', family='serif', size=12)

# Cargar los datos desde los archivos
data1 = np.loadtxt('data1.txt', skiprows=51, usecols=(-7, -6, -3, -2, -1))
data2 = np.loadtxt('data.txt', skiprows=103, usecols=(-9, -8, -4, -2, -1))

# Extraer variables del primer conjunto de datos
period1, errperiod1, eta1, dampingtime1, errdtime1 = data1.T
period2, errperiod2, eta2, dampingtime2, errdtime2 = data2.T

# Concatenar los datos de ambos conjuntos
period = np.concatenate((period1, period2)) * 60  # Convertir a segundos
errperiod = np.concatenate((errperiod1, errperiod2)) * 60
eta = np.concatenate((eta1, eta2))
dampingtime = np.concatenate((dampingtime1, dampingtime2)) * 60
errdtime = np.concatenate((errdtime1, errdtime2)) * 60

# Calcular tau_d/P
tau_d_over_P = dampingtime / period

# Definición de parámetros
wmin, wmax, nw = 0.5, 20, 101
w = np.linspace(wmin, wmax, nw)

nu = 4 * 10**(-3)

rlmin, rlmax, nrl = 0.0001, 0.3, 101  # Mm (1Mm = 1000km)
rl = np.linspace(rlmin, rlmax, nrl)

P_min, P_max, nP = 150, 1250, 101
P_values = np.linspace(P_min, P_max, nP)

# Creación de una malla de valores
W,P = np.meshgrid(w, P_values)

obs_values = dampingtime / period

# Modelo 3: Fuga de ondas

# Cálculo de tau_d / P
r3 = (4 / (np.pi**4)) * rl**(-2) 

# Modelo 2: Mezcla de fases

# Cálculo de tau_d / P
r2 = (3 / (np.pi**2 * nu))**(1/3) * (W**(2/3)) * (P**(-1/3))

# Priors uniformes para w y L/R
prior_rl = 1 / (rlmax - rlmin)
prior_w = 1 / (wmax - wmin)

sigma_3 = abs((errdtime / period)) + abs((dampingtime * errperiod / period**2))
sigma_3 = sigma_3[:, None]

like2_obs = (1 / (np.sqrt(2 * np.pi) * sigma_3)) * np.exp(-((obs_values[:, None] - r3) ** 2) / (2 * sigma_3 ** 2))
posterior2 = like2_obs * prior_rl
marginals_3 = np.trapz(posterior2, rl)

sigma_2 = abs((errdtime / period)) + abs((dampingtime * errperiod / period**2))
sigma_2 = sigma_2[:, None]

like2_obs = (1 / (np.sqrt(2 * np.pi) * sigma_2)) * np.exp(-((obs_values[:, None] - r2) ** 2) / (2 * sigma_2 ** 2))
posterior2 = like2_obs * prior_w
marginals_2 = np.trapz(posterior2, w)


bf23 = 2 * np.log((marginals_2+ 1e-15) / (marginals_3+ 1e-15))  # Bayes factor: Model 2 vs Model 3


# Definir colores según el factor de Bayes
colors = np.where(bf23 > 10, 'orange',  # EMF
          np.where(bf23 > 6, 'green',  # EF
          np.where(bf23 > 2, 'red',  # EP
          np.where(bf23 > 0, 'blue',
          np.where(bf23 > -2, 'blue',
          np.where(bf23 > -6, 'coral',
          np.where(bf23 > -10, 'lightgreen',
          'navajowhite'
                             )))))))  #EAM

plt.figure(figsize=(8, 6))
plt.scatter(tau_d_over_P, bf23, c=colors, edgecolors='black')

plt.xlabel(r'$\tau_d / P$', fontsize=17)
plt.ylabel(r'$2\ln(B_{MFFO})$', fontsize=17)
plt.ylim([-2.5,4])
plt.xlim([0.8,5.5])

plt.legend(handles=[
    plt.Line2D([0], [0], marker='o',linestyle='None', color='black', markerfacecolor='red', 
               label='Evidencia positiva ($M_{MF}$): \hspace{0.88cm} $2<2\ln(B_{MFFO})<6$', markersize=9),
    plt.Line2D([0], [0], marker='o',linestyle='None', color='black', markerfacecolor='blue', 
               label='Evidencia apenas mencionable:  $-2<2\ln(B_{MFFO})<2$ ', markersize=9),
    plt.Line2D([0], [0], marker='o',linestyle='None', color='black', markerfacecolor='coral', 
               label='Evidencia positiva ($M_{FO}$): \hspace{0.66cm} $-6<2\ln(B_{MFFO})<\hspace{-0.15cm}-2$', markersize=9),
    
], loc='best',fontsize=11.5)

plt.show()
