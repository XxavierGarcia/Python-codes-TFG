import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap, BoundaryNorm
from scipy.interpolate import griddata

plt.rc('text', usetex=True)
plt.rc('font', family='serif', size=12)


# Cargar los datos desde los archivos
data1 = np.loadtxt('data1.txt', skiprows=51, usecols=(-7, -6, -3, -2, -1))
data2 = np.loadtxt('data.txt', skiprows=103, usecols=(-9, -8, -4, -2, -1))

# Extraer variables del primer conjunto de datos
period1, errperiod1, eta1, dampingtime1, errdtime1 = data1.T
period2, errperiod2, eta2, dampingtime2, errdtime2 = data2.T

# Concatenar los datos de ambos conjuntos
period = np.concatenate((period1, period2)) * 60  # Convertir a segundos
errperiod = np.concatenate((errperiod1, errperiod2)) * 60
eta = np.concatenate((eta1, eta2))
dampingtime = np.concatenate((dampingtime1, dampingtime2)) * 60
errdtime = np.concatenate((errdtime1, errdtime2)) * 60

# Calcular tau_d/P
tau_d_over_P = dampingtime / period


# Definición de parámetros
zetamin, zetamax, nzeta = 1.1, 9.5, 100
zeta = np.linspace(zetamin, zetamax, nzeta)

Rmin, Rmax, nR = 0.5, 5, 100
R = np.linspace(Rmin, Rmax, nR)

eta_min, eta_max, neta = 0.2, 30, 100
eta_vals = np.linspace(eta_min, eta_max, neta) 

tau_d_min, tau_d_max, ntau_d = 0.5, 10, 100
tau_P_vals = np.linspace(tau_d_min, tau_d_max, ntau_d)

# Creación de una malla de valores
eta_grid, tau_P_grid = np.meshgrid(eta_vals, tau_P_vals)
R_grid, zeta_grid = np.meshgrid(R, zeta)

lR_min, lR_max, nlR = 0.1, 2.0, 100
lR = np.linspace(lR_min, lR_max, nlR)

# Creación de una malla de valores
Z, LR = np.meshgrid(zeta, lR)

# Priors uniformes para zeta, R y l/R
prior_zeta = 1 / (zetamax - zetamin)
prior_R = 1 / (Rmax - Rmin)
prior_lor = 1 / (lR_max - lR_min)

# Modelo 4: Amortiguamiento no lineal

def r4(R, zeta, eta):
    a = eta / R
    # Cálculo de tau_d / P
    r4 = 40 * np.sqrt(np.pi) * (1 / (2 * np.pi * a)) * ((1 + zeta) / np.sqrt(zeta**2 - 2*zeta + 97))
    return r4

def marginal4(eta, tau_P):
    tau_P_pred = r4(R_grid, zeta_grid, eta)
    
    # Calcular likelihood 
    sigma = 0.1 * tau_P
    likelihood = (1 / (np.sqrt(2 * np.pi) * sigma)) * \
                np.exp(-((tau_P - tau_P_pred)**2) / (2 * sigma ** 2))

    posterior = likelihood * prior_R * prior_zeta
    
    marginal = np.trapz(np.trapz(posterior, R, axis=0), zeta, axis=0)
    
    return marginal


# Modelo 1: Amortiguamiento resonante

# Cálculo de tau_d / P
r1 = (2 / np.pi) * (1 / LR) * ((Z + 1) / (Z - 1))


def marginal(eta, tau_d):
    sigma = 0.1 * tau_d
    like1_obs = (1 / (np.sqrt(2 * np.pi) * sigma)) * np.exp(-((tau_d - r1) ** 2) / (2 * sigma ** 2))
    posterior = like1_obs * prior_zeta * prior_lor
    marginal = np.trapz(np.trapz(posterior, lR, axis=0), zeta)
    return marginal


marginals_4 = np.zeros_like(eta_grid)
for i in range(eta_grid.shape[0]):
    for j in range(eta_grid.shape[1]):
        marginals_4[i,j] = marginal4(eta_grid[i,j], tau_P_grid[i,j])


marginals_1 = np.zeros_like(eta_grid)
for i in range(eta_grid.shape[0]):
    for j in range(eta_grid.shape[1]):
        marginals_1[i,j] = marginal(eta_grid[i,j], tau_P_grid[i,j])

# Normalizar distribuciones
marginals_4 /= np.sum(marginals_4)
marginals_1 /= np.sum(marginals_1)


bf41 = 2 * np.log(marginals_4 / marginals_1)


fig, ax = plt.subplots(figsize=(8, 6))

bounds = [-120,-50,-20,-10, -6, -2, 2, 6, 10]
colors = ['indianred','bisque','lightcyan','lightblue', 'lightgreen', 'white','red','lightblue']

cmap = ListedColormap(colors)
norm = BoundaryNorm(bounds, len(colors))

#interpolación de puntos
points = np.column_stack((eta_grid.flatten(), tau_P_grid.flatten()))
values = bf41.flatten()
bf_obs = griddata(points, values, (eta, tau_d_over_P), method='nearest')


scatter = ax.scatter(eta, tau_d_over_P, c=bf_obs, cmap=cmap, norm=norm, edgecolors='black')
ax.set_xlabel(r'$\eta$ (Mm)', fontsize=17)
ax.set_ylabel(r'$\tau_d/P$', fontsize=17)
ax.set_xlim([0, 30])
ax.set_ylim([0.4, 10])

plt.legend(handles=[
    plt.Line2D([0], [0], marker='o',linestyle='None', color='black', markerfacecolor='red', 
               label=r'Evidencia positiva ($M_{NL}$): \hspace{0.9cm} $2<2\ln(B_{NLAR})<6$', markersize=9),
    plt.Line2D([0], [0], marker='o',linestyle='None', color='black', markerfacecolor='white', 
               label=r'Evidencia apenas mencionable:  $-2<2\ln(B_{NLAR})<2$ ', markersize=9),
    plt.Line2D([0], [0], marker='o',linestyle='None', color='black', markerfacecolor='lightgreen', 
               label=r'Evidencia positiva ($M_{AR}$): \hspace{0.65cm} $-6<2\ln(B_{NLAR})<\hspace{-0.15cm}-2$', markersize=9),
    plt.Line2D([0], [0], marker='o',linestyle='None', color='black', markerfacecolor='lightblue', 
               label=r'Evidencia fuerte ($M_{AR}$): \hspace{0.85cm} $-10<2\ln(B_{NLAR})<\hspace{-0.15cm}-6$', markersize=9),
], loc='best',fontsize=11.5)


plt.tight_layout()
plt.show()
