import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm


plt.rc('text', usetex=True)
plt.rc('font', family='serif', size=12)

# Modelo 2: Mezcla de fases

# Definición de parámetros
wmin, wmax, nw = 0.5, 20, 450  # Mm (1 Mm = 1000 km)
w = np.linspace(wmin, wmax, nw)

P_values = [150, 300, 550, 850, 1250]  

nu = 4 * 10**(-3)  

# Creación de una malla de valores
W, P = np.meshgrid(w, P_values)

# Cálculo de tau_d / P
r2 = (3 / (np.pi**2 * nu))**(1/3) * W**(2/3) * P**(-1/3)  
tau_d = (3 / (np.pi**2 * nu))**(1/3) * W**(2/3) * P**(2/3)

green_cmap = cm.viridis

# Gráfico de tau_d/P vs w
plt.figure(figsize=(8, 6))
for i, P_val in enumerate(P_values):
    plt.plot(w, r2[i, :], label=f'P = {P_val} s', color=green_cmap(i / len(P_values)))  # Etiqueta para cada curva
plt.xlabel('$w$ (Mm)', fontsize=17)
plt.ylabel(r'$\tau_d/P$', fontsize=18)
plt.legend(fontsize=13,frameon=False)
plt.show()


# Cálculo del posterior para diferentes valores observados
P_values = 150
r2 = (3 / (np.pi**2 * nu))**(1/3) * w**(2/3) * P_values**(-1/3)

# Priors uniformes para w
prior_w = 1 / (wmax - wmin)

# Valores observacionales
obs_values = np.array([1.5, 3, 10])  
sigma = 0.1 * obs_values

posteriors_w = []
for i, obs_value in enumerate(obs_values):
    like2_obs = (1 / (np.sqrt(2 * np.pi) * sigma[i])) * np.exp(-((obs_value - r2)**2) / (2 * sigma[i]**2))
    posterior = like2_obs * prior_w 
    posterior /= np.trapz(posterior, w)
    posteriors_w.append(posterior)

color_map = cm.Set2

# Gráfico de p(w | r)
plt.figure(figsize=(8, 6))

for i, obs_value in enumerate(obs_values):
    plt.plot(w, posteriors_w[i], label=fr"$\tau_d/P = {obs_value}$", 
             linewidth=1.5, color=color_map(i / (len(obs_values) - 1)))
plt.xlabel("$w$ (Mm)", fontsize=17)
plt.ylabel(r"$p(w |\:\tau_d/P,\: M_{MF})$", fontsize=18)
plt.xlim([0, 20.29])
plt.ylim([-0.05, 1.1])
plt.tight_layout()
plt.legend(fontsize=16, frameon=False, loc='best')
plt.show()
