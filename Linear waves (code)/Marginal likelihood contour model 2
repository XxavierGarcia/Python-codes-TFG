import numpy as np
import matplotlib.pyplot as plt
from matplotlib.lines import Line2D

plt.rc('text', usetex=True)
plt.rc('font', family='serif', size=12)

# Modelo 2: Mezcla de fases

# Definición de parámetros
wmin, wmax, nw = 0.5, 20, 300  # Mm (1Mm = 1000km)
w = np.linspace(wmin, wmax, nw)

nu = 4 * 10**(-3)

P_min, P_max, nP = 40, 1300, 300  
P_values = np.linspace(P_min, P_max, nP)

tau_d_min, tau_d_max, ntau_d = 40, 4000, 300  
tau_d_values = np.linspace(tau_d_min, tau_d_max, ntau_d)

# Cálculo de tau_d / P
r2 = (3 / (np.pi**2 * nu))**(1/3) * (w**(2/3))[:, np.newaxis] * (P_values**(-1/3))  # (nw, nP)

# Priors uniformes para w
prior_w = 1 / (wmax - wmin)

obs_values = np.linspace(0.01, 10, ntau_d)  


marginals_2 = np.zeros((ntau_d, nP))

# Bucle sobre tau_d_values y P_values
for i, tau_d in enumerate(tau_d_values):
    for j, P in enumerate(P_values):
        obs_value = tau_d / P  
        sigma_2 = 0.1 * obs_value

        # Likelihood 
        like2_obs = (1 / (np.sqrt(2 * np.pi) * sigma_2)) * \
                    np.exp(-((obs_value - r2[:, j]) ** 2) / (2 * sigma_2 ** 2))

        # Calcular posterior
        posterior = like2_obs * prior_w

        # p(w| r)
        marginals_2[i, j] = np.trapz(posterior, w)

marginals_2 /= np.sum(marginals_2)  

# Cargar datos observacionales
data1 = np.loadtxt('data1.txt', skiprows=51, usecols=(-7, -6, -3, -2, -1))
data2 = np.loadtxt('data.txt', skiprows=103, usecols=(-9, -8, -4, -2, -1))

# Extraer variables
period1, errperiod1, eta1, dampingtime1, errdtime1 = data1.T
period2, errperiod2, eta2, dampingtime2, errdtime2 = data2.T

# Concatenar los datos
period = np.concatenate((period1, period2)) * 60
errperiod = np.concatenate((errperiod1, errperiod2)) * 60
dampingtime = np.concatenate((dampingtime1, dampingtime2)) * 60
errdtime = np.concatenate((errdtime1, errdtime2)) * 60


fig, ax = plt.subplots(figsize=(8, 6))

contour = ax.contourf(P_values, tau_d_values, marginals_2, cmap="Greens",extend="both")
cbar = plt.colorbar(contour, ax=ax)

scatter = ax.scatter(period, dampingtime, edgecolors='black', facecolors='lawngreen', label="Datos observacionales")

# Encontrar el contorno donde la probabilidad es 1e-7
contour_level = 1e-7
CS = ax.contour(P_values, tau_d_values, marginals_2, levels=[contour_level], colors='black', linestyles='dotted', linewidths=1.2)

ax.set_title(r"$p(\tau_d, P |\: M_{MF})$", fontsize=18)
ax.set_xlabel('$P$ (s)', fontsize=17)
ax.set_ylabel(r'$\tau_d$ (s)', fontsize=19)
ax.set_ylim([0, 3100])
ax.set_xlim([30, 1300])
line = Line2D([0], [0], color='black', linewidth=1.3, linestyle='dotted')  # Línea discontinua
ax.legend([line, scatter], [r'$p(\tau_d, P |\: M_{MF})= 1\cdot 10^{{-7}} $', 'Datos observacionales'], loc='best', fontsize=13)

plt.tight_layout()
plt.show()

