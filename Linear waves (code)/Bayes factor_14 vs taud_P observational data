import numpy as np
import matplotlib.pyplot as plt

plt.rc('text', usetex=True)
plt.rc('font', family='serif', size=12)

# Cargar los datos desde los archivos
data1 = np.loadtxt('data1.txt', skiprows=51, usecols=(-7, -6, -3, -2, -1))
data2 = np.loadtxt('data.txt', skiprows=103, usecols=(-9, -8, -4, -2, -1))

# Extraer variables del primer conjunto de datos
period1, errperiod1, eta1, dampingtime1, errdtime1 = data1.T
period2, errperiod2, eta2, dampingtime2, errdtime2 = data2.T


# Concatenar los datos de ambos conjuntos
period = np.concatenate((period1, period2)) * 60  # Convertir a segundos
errperiod = np.concatenate((errperiod1, errperiod2)) * 60
eta = np.concatenate((eta1, eta2))
dampingtime = np.concatenate((dampingtime1, dampingtime2)) * 60
errdtime = np.concatenate((errdtime1, errdtime2)) * 60

# Calcular tau_d/P
tau_d_over_P = dampingtime / period
obs_values = dampingtime / period

# Definición de parámetros
Rmin, Rmax, nR = 0.5, 5, 101
R = np.linspace(Rmin, Rmax, nR)

eta_min, eta_max, neta = 0.2, 30, 101
eta_values = np.linspace(eta_min, eta_max, neta) 

zetamin, zetamax, nzeta = 1.01, 10.0, 101
zeta = np.linspace(zetamin, zetamax, nzeta)

lR_min, lR_max, nlR = 0.01, 2.0, 101
lR = np.linspace(lR_min, lR_max, nlR)

P_min, P_max, nP = 150, 1250, 101
P_values = np.linspace(P_min, P_max, nP)

# Creación de una malla de valores
Z, LR = np.meshgrid(zeta, lR)

# Creación de una malla de valores
ETA, R_grid = np.meshgrid(eta_values, R) 

# Priors uniformes para zeta, l/R y R
prior_zeta = 1 / (zetamax - zetamin)
prior_lor = 1 / (lR_max - lR_min)
prior_R = 1 / (Rmax - Rmin)

# Modelo 1: Amortiguamiento resonante

# Cálculo de tau_d / P
r1 = (2 / np.pi) * (1 / (LR)) * ((Z + 1) / (Z - 1))

# Modelo 4: Amortiguamiento no lineal

# Cálculo de tau_d / P
r4 = 40 * np.sqrt(np.pi) * (1 / (2 * np.pi * ETA / R_grid)) * ((1 + Z) / np.sqrt(Z**2 - 2*Z + 97))

sigma = np.sqrt((errdtime / period)**2 + (dampingtime * errperiod / period**2)**2)
sigma = sigma[:, None, None]

like1_obs = (1 / (np.sqrt(2 * np.pi) * sigma)) * np.exp(-((obs_values[:, None, None] - r1) ** 2) / (2 * sigma ** 2))
posterior1 = like1_obs * prior_zeta * prior_lor
marginals1 = np.trapz(posterior1, lR)
marginals_ = np.trapz(marginals1, zeta)

sigma_2 = np.sqrt((errdtime / period)**2 + (dampingtime * errperiod / period**2)**2)
sigma_2 = sigma_2[:, None, None]

like2_obs = (1 / (np.sqrt(2 * np.pi) * sigma_2)) * np.exp(-((obs_values[:, None, None] - r4) ** 2) / (2 * sigma_2 ** 2))
posterior2 = like2_obs * prior_zeta * prior_R
marginals2 = np.trapz(posterior2, R)
marginals_2 = np.trapz(marginals2, zeta)


bf12 = 2 * np.log((marginals_ + 1e-15) / (marginals_2 + 1e-15)) 


# Definir colores según el factor de Bayes
colors = np.where(bf12 > 10, 'orange',  # EMF
          np.where(bf12 > 6, 'green',  #EF
          np.where(bf12 > 2, 'red',  # EP
          np.where(bf12 > 0, 'blue',
          np.where(bf12 > -2, 'blue',
          np.where(bf12 > -6, 'coral',
          np.where(bf12 > -10, 'lightgreen',
          'yellow'
                             )))))))  # EAM

plt.figure(figsize=(8, 6))
plt.scatter(tau_d_over_P, bf12, c=colors, edgecolors='black')

plt.xlabel(r'$\tau_d / P$', fontsize=17)
plt.ylabel(r'$2\ln(B_{14})$', fontsize=17)
plt.ylim([-1.7,1.5])
plt.xlim([0,6.5])


plt.legend(handles=[
    
    plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='blue', 
               label='Evidencia apenas mencionable:  $-2<2\ln B_{14}<2$ ', markersize=10),
], loc='best',fontsize=12)

plt.show()



