import numpy as np
import matplotlib.pyplot as plt

plt.rc('text', usetex=True)
plt.rc('font', family='serif', size=12)

# Cargar los datos desde los archivos
data1 = np.loadtxt('data1.txt', skiprows=51, usecols=(-21,-20,-7, -6, -3, -2, -1))
data2 = np.loadtxt('data.txt', skiprows=103, usecols=(-23,-22,-9, -8, -4, -2, -1))

# Extraer variables del primer conjunto de datos
IDEV,IDLOOP1, period1, errperiod1, eta1, dampingtime1, errdtime1 = data1.T
IDEV2,IDLOOP2, period2, errperiod2, eta2, dampingtime2, errdtime2 = data2.T

# Concatenar los datos de ambos conjuntos
period = np.concatenate((period1, period2)) * 60  # Convertir a segundos
errperiod = np.concatenate((errperiod1, errperiod2)) * 60
eta = np.concatenate((eta1, eta2))
dampingtime = np.concatenate((dampingtime1, dampingtime2)) * 60
errdtime = np.concatenate((errdtime1, errdtime2)) * 60

# Calcular tau_d/P
tau_d_over_P = dampingtime / period


# Definición de parámetros
zetamin, zetamax, nzeta = 1.01, 10.0, 101
zeta = np.linspace(zetamin, zetamax, nzeta)

lR_min, lR_max, nlR = 0.01, 2.0, 101
lR = np.linspace(lR_min, lR_max, nlR)

P_min, P_max, nP = 150, 1250, 101
P_values = np.linspace(P_min, P_max, nP)

rlmin, rlmax, nrl = 0.0001, 0.3, 101  # Mm (1Mm = 1000km)
rl = np.linspace(rlmin, rlmax, nrl)

obs_values = dampingtime / period

# Creación de una malla de valores
Z, LR = np.meshgrid(zeta, lR)

# Modelo 1: Amortiguamiento resonante

# Cálculo de tau_d / P
r1 = (2 / np.pi) * (1 / (LR)) * ((Z + 1) / (Z - 1))

# Modelo 3: Fuga de ondas

# Cálculo de tau_d / P
r3 = (4 / (np.pi**4)) * rl**(-2) 

# Priors uniformes para zeta, L/R y l/R
prior_zeta = 1 / (zetamax - zetamin)
prior_lor = 1 / (lR_max - lR_min)
prior_rl = 1 / (rlmax - rlmin)


sigma = abs((errdtime / period)) + abs((dampingtime * errperiod / period**2))
sigma = sigma[:, None, None]

like1_obs = (1 / (np.sqrt(2 * np.pi) * sigma)) * np.exp(-((obs_values[:, None, None] - r1) ** 2) / (2 * sigma ** 2))
posterior1 = like1_obs * prior_zeta * prior_lor
marginals1 = np.trapz(posterior1, lR)
marginals_ = np.trapz(marginals1, zeta)

sigma_3 = abs((errdtime / period)) + abs((dampingtime * errperiod / period**2))
sigma_3 = sigma_3[:, None]

like2_obs = (1 / (np.sqrt(2 * np.pi) * sigma_3)) * np.exp(-((obs_values[:, None] - r3) ** 2) / (2 * sigma_3 ** 2))
posterior2 = like2_obs * prior_rl
marginals_3 = np.trapz(posterior2, rl)


bf13 = 2 * np.log((marginals_+ 1e-15) / (marginals_3 + 1e-15))

# Definir colores según el factor de Bayes
colors = np.where(bf13 > 10, 'orange',  # EMF
          np.where(bf13 > 6, 'green',  # EF
          np.where(bf13 > 2, 'red',  # EP
          np.where(bf13 > 0, 'blue',
          np.where(bf13 > -2, 'blue',
          np.where(bf13 > -6, 'coral',
          np.where(bf13 > -10, 'lightgreen',
          'yellow'
                             )))))))  # EAM

# Graficar
plt.figure(figsize=(8, 6))
plt.scatter(tau_d_over_P, bf13, c=colors, edgecolors='black')

plt.xlabel(r'$\tau_d / P$', fontsize=17)
plt.ylabel(r'$2\ln(B_{ARFO})$', fontsize=17)

plt.ylim([-0.4,0.6])

plt.legend(handles=[
    
    plt.Line2D([0], [0], marker='o',linestyle='None', color='black', markerfacecolor='blue', 
               label='Evidencia apenas mencionable: $-2<2\ln(B_{ARFO})<2$ ', markersize=9),
    
], loc='best',fontsize=12)

plt.show()
