
import numpy as np
import matplotlib.pyplot as plt

plt.rc('text', usetex=True)
plt.rc('font', family='serif', size=12)

# Cargar los datos desde los archivos
data1 = np.loadtxt('data1.txt', skiprows=51, usecols=(-7, -6, -3, -2, -1))
data2 = np.loadtxt('data.txt', skiprows=103, usecols=(-9, -8, -4, -2, -1))

# Extracción de variables del primer conjunto de datos
period1, errperiod1, eta1, dampingtime1, errdtime1 = data1.T

# Extracción de variables del segundo conjunto de datos
period2, errperiod2, eta2, dampingtime2, errdtime2 = data2.T

# Concatenación de los datos de ambos conjuntos
period = np.concatenate((period1, period2)) * 60
errperiod = np.concatenate((errperiod1, errperiod2)) * 60
dampingtime = np.concatenate((dampingtime1, dampingtime2)) * 60
errdtime = np.concatenate((errdtime1, errdtime2)) * 60


# Modelo 1: Amortiguamiento resonante

# Definición de parámetros
zetamin, zetamax, nzeta = 1.01, 10.0, 700
zeta = np.linspace(zetamin, zetamax, nzeta)

lR_min, lR_max, nlR = 0.01, 2.0, 700
lR = np.linspace(lR_min, lR_max, nlR)

P_min, P_max, nP = 60, 1250, 700
P_values = np.linspace(P_min, P_max, nP)

# Creación de una malla de valores
Z, LR = np.meshgrid(zeta, lR)  

# Cálculo de tau_d / P 
r1 = (2 / np.pi) * (1 / LR) * ((Z + 1) / (Z - 1))

# Cálculo de tau_d mínimo y máximo para cada P
tau_d_min_values = []
tau_d_max_values = []

for p in P_values:
    tau_d = (2 * (Z + 1) * p) / (np.pi * LR * (Z - 1))
    tau_d_min_values.append(np.min(tau_d))
    tau_d_max_values.append(np.max(tau_d))

tau_d_min_values = np.array(tau_d_min_values)
tau_d_max_values = np.array(tau_d_max_values)


# Gráfica del modelo 1
plt.figure(figsize=(8, 6))
plt.scatter(period, dampingtime, edgecolors='black', facecolors='lawngreen', label="Datos observacionales")
plt.xlabel('$P$ (s)', fontsize=19)
plt.ylabel(r'$\tau_d$ (s)', fontsize=19)
plt.fill_between(P_values, tau_d_min_values, tau_d_max_values, color='limegreen', alpha=0.2, label=r'Predicción $M_{AR}$')
plt.ylim([0, 3100])
plt.xlim([45, 1300])
plt.legend(fontsize=14)
plt.show()


# Modelo 2: Mezcla de fases

# Definición de parámetros
wmin, wmax, nw = 0.5, 20, 450  #Mm (1 Mm = 1000 km)
w = np.linspace(wmin, wmax, nw)

Pmin, Pmax, nP = 80, 1250, 450
P_values = np.linspace(Pmin, Pmax, nP)

nu = 4 * 10**(-3)  

# Cálculo de tau_d mínimo y máximo
tau_d_min_values = []
tau_d_max_values = []

for p in P_values:
    tau_d = (3 / (np.pi**2 * nu))**(1/3) * w**(2/3) * p**(2/3)
    tau_d_min_values.append(np.min(tau_d))
    tau_d_max_values.append(np.max(tau_d))

tau_d_min_values = np.array(tau_d_min_values)
tau_d_max_values = np.array(tau_d_max_values)

# Gráfica del modelo 2
plt.figure(figsize=(8, 6))
plt.scatter(period, dampingtime, edgecolors='black', facecolors='lawngreen', label="Datos observacionales")
plt.xlabel('$P$ (s)', fontsize=19)
plt.ylabel(r'$\tau_d$ (s)', fontsize=19)
plt.fill_between(P_values, tau_d_min_values, tau_d_max_values, color='limegreen', alpha=0.2, label=r'Predicción $M_{MF}$')
plt.ylim([0, 3100])
plt.xlim([45, 1300])
plt.legend(fontsize=14)
plt.show()


# Modelo 3: Fuga de ondas

# Definición de parámetros
rlmin, rlmax, nrl = 0.0001, 0.3, 500  
rl = np.linspace(rlmin, rlmax, nrl)

Pmin, Pmax, nP = 60, 1250, 500
P_values = np.linspace(Pmin, Pmax, nP)

# Cálculo de tau_d mínimo y máximo
tau_d_min_values = []
tau_d_max_values = []

for p in P_values:
    tau_d = (4 / (np.pi**4)) * rl**(-2) * p
    tau_d_min_values.append(np.min(tau_d))
    tau_d_max_values.append(np.max(tau_d))

tau_d_min_values = np.array(tau_d_min_values)
tau_d_max_values = np.array(tau_d_max_values)

# Gráfica del modelo 3
plt.figure(figsize=(8, 6))
plt.scatter(period, dampingtime, edgecolors='black', facecolors='lawngreen', label="Datos observacionales")
plt.xlabel('$P$ (s)', fontsize=19)
plt.ylabel(r'$\tau_d$ (s)', fontsize=19)
plt.fill_between(P_values, tau_d_min_values, tau_d_max_values, color='limegreen', alpha=0.2, label=r'Predicción $M_{FO}$')
plt.ylim([0, 3100])
plt.xlim([45, 1300])
plt.legend(fontsize=14)
plt.show()


# Modelo 4: Amortiguamiento no lineal

# Definición de parámetros
zetamin, zetamax, nzeta = 1.01, 9.5, 700
zeta = np.linspace(zetamin, zetamax, nzeta)

Rmin, Rmax, nR = 0.5, 5, 700
R = np.linspace(Rmin, Rmax, nR)

eta_min, eta_max, neta = 0.2, 30, 700
eta_values = np.linspace(eta_min, eta_max, neta) 

# Creación de una malla de valores
Z, R_grid = np.meshgrid(zeta, R)  

a = eta_values / R_grid
r4 = 40 * np.sqrt(np.pi) * (1 / (2 * np.pi * a)) * ((1 + Z) / np.sqrt(Z**2 - 2*Z + 97))

# Cálculo de tau_d mínimo y máximo para cada P
tau_d_min_values = []
tau_d_max_values = []

for p in P_values:
    tau_d = 40 * np.sqrt(np.pi)* p * (1 / (2 * np.pi * a)) * ((1 + Z) / np.sqrt(Z**2 - 2*Z + 97))
    tau_d_min_values.append(np.min(tau_d))
    tau_d_max_values.append(np.max(tau_d))

tau_d_min_values = np.array(tau_d_min_values)
tau_d_max_values = np.array(tau_d_max_values)


# Gráfica del modelo 4
plt.figure(figsize=(8, 6))
plt.scatter(period, dampingtime, edgecolors='black', facecolors='darkorange', label="Datos observacionales")
plt.xlabel('$P$ (s)', fontsize=19)
plt.ylabel(r'$\tau_d$ (s)', fontsize=19)
plt.fill_between(P_values, tau_d_min_values, tau_d_max_values, color='orange', alpha=0.2, label=r'Predicción $M_{NL}$')
plt.ylim([0, 3100])
plt.xlim([45, 1300])
plt.legend(fontsize=14)
plt.show()
