import numpy as np
import matplotlib.pyplot as plt

plt.rc('text', usetex=True)
plt.rc('font', family='serif', size=12)

# Cargar los datos desde los archivos
data1 = np.loadtxt('data1.txt', skiprows=51, usecols=(-7, -6, -3, -2, -1))
data2 = np.loadtxt('data.txt', skiprows=103, usecols=(-9, -8, -4, -2, -1))

# Extraer variables del primer conjunto de datos
period1, errperiod1, eta1, dampingtime1, errdtime1 = data1.T
period2, errperiod2, eta2, dampingtime2, errdtime2 = data2.T

# Concatenar los datos de ambos conjuntos
period = np.concatenate((period1, period2)) * 60  # Convertir a segundos
errperiod = np.concatenate((errperiod1, errperiod2)) * 60
eta = np.concatenate((eta1, eta2))
dampingtime = np.concatenate((dampingtime1, dampingtime2)) * 60
errdtime = np.concatenate((errdtime1, errdtime2)) * 60

# Calcular tau_d/P
tau_d_over_P = dampingtime / period
obs_values = tau_d_over_P

# Definición de parámetros
wmin, wmax, nw = 0.5, 20, 101
w = np.linspace(wmin, wmax, nw)

nu = 4 * 10**(-3)

zetamin, zetamax, nzeta = 1.01, 10.0, 101
zeta = np.linspace(zetamin, zetamax, nzeta)

lR_min, lR_max, nlR = 0.01, 2.0, 101
lR = np.linspace(lR_min, lR_max, nlR)

P_min, P_max, nP = 150, 1250, 101
P_values = np.linspace(P_min, P_max, nP)

# Creación de una malla de valores
Z, LR = np.meshgrid(zeta, lR)
W, P = np.meshgrid(w, P_values)

# Modelo 1: Amortiguamiento resonante

# Cálculo de tau_d / P
r1 = (2 / np.pi) * (1 / LR) * ((Z + 1) / (Z - 1))
r1 = r1[None, :, :]  # Expandir a (1, nzeta, nlR) para broadcasting

# Modelo 2: Mezcla de fases
r2 = (3 / (np.pi**2 * nu))**(1/3) * (W**(2/3)) * (P**(-1/3))
r2 = r2[None, :]  # Expandir para (1, nw)

# Priors uniformes para zeta, w y l/R
prior_zeta = 1 / (zetamax - zetamin)
prior_lor = 1 / (lR_max - lR_min)
prior_w = 1 / (wmax - wmin)

# Sigma y likelihood 
sigma = abs((errdtime / period)) + abs((dampingtime * errperiod / period**2))
sigma = sigma[:, None, None]  # Expandir para broadcast con (N, nzeta, nlR)

like1_obs = (1 / (np.sqrt(2 * np.pi) * sigma)) * np.exp(-((obs_values[:, None, None] - r1) ** 2) / (2 * sigma ** 2))
posterior1 = like1_obs * prior_zeta * prior_lor
marginals1 = np.trapz(posterior1, lR)
marginals_ = np.trapz(marginals1, zeta)

# Sigma y likelihood 
sigma_2 = abs((errdtime / period)) + abs((dampingtime * errperiod / period**2))
sigma_2 = sigma_2[:, None]  # Expandir para broadcast con (N, nw)

like2_obs = (1 / (np.sqrt(2 * np.pi) * sigma_2)) * np.exp(-((obs_values[:, None] - r2) ** 2) / (2 * sigma_2 ** 2))
posterior2 = like2_obs * prior_w
marginals_2 = np.trapz(posterior2, w)

# Bayes factor Modelo 1 vs Modelo 2
bf12 = 2 * np.log((marginals_) / (marginals_2))

# Definir colores según el factor de Bayes
colors = np.where(bf12 > 10, 'orange',
          np.where(bf12 > 6, 'green',
          np.where(bf12 > 2, 'red',
          np.where(bf12 > 0, 'blue',
          np.where(bf12 > -2, 'blue',
          np.where(bf12 > -6, 'coral',
          np.where(bf12 > -10, 'lightgreen', 'yellow')))))))
colors = colors.flatten()

plt.figure(figsize=(8, 6))
plt.scatter(tau_d_over_P, bf12, c=colors, edgecolors='black')

plt.xlabel(r'$\tau_d / P$', fontsize=17)
plt.ylabel(r'$2\ln(B_{ARMF})$', fontsize=17)
plt.ylim([-4.5, 3])
plt.xlim([0, 6])

plt.legend(handles=[
    plt.Line2D([0], [0], marker='o', linestyle='None', color='black', markerfacecolor='red',
               label=r'Evidencia positiva ($M_{AR}$): \hspace{0.95cm} $2<2\ln (B_{ARMF})<6$', markersize=9),
    plt.Line2D([0], [0], marker='o', linestyle='None', color='black', markerfacecolor='blue',
               label=r'Evidencia apenas mencionable:  $-2<2\ln (B_{ARMF})<2$ ', markersize=9),
    plt.Line2D([0], [0], marker='o', linestyle='None', color='black', markerfacecolor='coral',
               label=r'Evidencia positiva ($M_{MF}$): \hspace{0.58cm} $-6<2\ln (B_{ARMF})<\hspace{-0.15cm}-2$', markersize=9),
], loc='best', fontsize=11.5)

plt.show()
